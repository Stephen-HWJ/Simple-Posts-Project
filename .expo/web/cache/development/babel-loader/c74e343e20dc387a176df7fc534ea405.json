{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { act } from \"react-test-renderer\";\nimport { combineReducers } from \"redux\";\nvar INITIAL_STATE = {\n  ifFetching: true,\n  posts: []\n};\n\nvar postsReducer = function postsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_POST\":\n      return {\n        posts: [].concat(_toConsumableArray(state.posts), [action.postInfo])\n      };\n\n    case \"REQUEST_POSTS\":\n      console.log(state);\n      return {\n        isFetching: true,\n        posts: _toConsumableArray(state.posts)\n      };\n\n    case \"RECEIVE_POSTS\":\n      console.log(state);\n      return {\n        isFetching: false,\n        posts: _toConsumableArray(action.posts)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;","map":{"version":3,"sources":["/Users/sh/Project/Simple-Posts-Project/redux/postsReducer.js"],"names":["act","combineReducers","INITIAL_STATE","ifFetching","posts","postsReducer","state","action","type","postInfo","console","log","isFetching"],"mappings":";AAAA,SAASA,GAAT,QAAoB,qBAApB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,UAAU,EAAE,IADQ;AAEpBC,EAAAA,KAAK,EAAE;AAFa,CAAtB;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAmC;AAAA,MAAlCC,KAAkC,uEAA1BJ,aAA0B;AAAA,MAAXK,MAAW;;AACtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAO;AAAEJ,QAAAA,KAAK,+BAAME,KAAK,CAACF,KAAZ,IAAmBG,MAAM,CAACE,QAA1B;AAAP,OAAP;;AACF,SAAK,eAAL;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,aAAO;AAAEM,QAAAA,UAAU,EAAE,IAAd;AAAoBR,QAAAA,KAAK,qBAAME,KAAK,CAACF,KAAZ;AAAzB,OAAP;;AACF,SAAK,eAAL;AACEM,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,aAAO;AAAEM,QAAAA,UAAU,EAAE,KAAd;AAAqBR,QAAAA,KAAK,qBAAMG,MAAM,CAACH,KAAb;AAA1B,OAAP;;AACF;AACE,aAAOE,KAAP;AAVJ;AAYD,CAbD;;AAkBA,eAAeD,YAAf","sourcesContent":["import { act } from \"react-test-renderer\";\nimport { combineReducers } from \"redux\";\n\nconst INITIAL_STATE = {\n  ifFetching: true,\n  posts: [],\n};\n\nconst postsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"ADD_POST\":\n      return { posts: [...state.posts, action.postInfo] };\n    case \"REQUEST_POSTS\":\n      console.log(state);\n      return { isFetching: true, posts: [...state.posts] };\n    case \"RECEIVE_POSTS\":\n      console.log(state);\n      return { isFetching: false, posts: [...action.posts] };\n    default:\n      return state;\n  }\n};\n\n// export default combineReducers({\n//   posts: postsReducer,\n// });\nexport default postsReducer;\n"]},"metadata":{},"sourceType":"module"}