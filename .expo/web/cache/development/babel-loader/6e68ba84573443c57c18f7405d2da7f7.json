{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sh/Project/Simple-Posts-Project/components/addButton.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { bindActionCreators } from \"redux\";\nimport { addPost } from \"../redux/postsActions\";\nimport { connect } from \"react-redux\";\n\nvar AddButton = function (_React$Component) {\n  _inherits(AddButton, _React$Component);\n\n  var _super = _createSuper(AddButton);\n\n  function AddButton() {\n    var _this;\n\n    _classCallCheck(this, AddButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      modalVisible: false,\n      title: \"title\",\n      body: \"body\"\n    };\n\n    _this.setModalVisible = function (visible) {\n      _this.setState({\n        modalVisible: visible\n      });\n    };\n\n    _this.addPost = function () {\n      fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          title: _this.state.title,\n          body: _this.state.body,\n          userId: 1\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        console.log(json);\n\n        _this.props.addPost(json);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AddButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var modalVisible = this.state.modalVisible;\n      return React.createElement(View, {\n        style: styles.centeredView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, React.createElement(Modal, {\n        animationType: \"slide\",\n        transparent: true,\n        visible: modalVisible,\n        onRequestClose: function onRequestClose() {\n          Alert.alert(\"Modal has been closed.\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.centeredView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: styles.modalView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }\n      }, React.createElement(TextInput, {\n        style: styles.modalText,\n        placeholder: \"Title\",\n        onChangeText: function onChangeText(text) {\n          _this2.setState({\n            title: text\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }\n      }), React.createElement(TextInput, {\n        style: styles.modalText,\n        multiline: true,\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            body: text\n          });\n        },\n        placeholder: \"Body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }\n      }), React.createElement(TouchableHighlight, {\n        style: _objectSpread(_objectSpread({}, styles.openButton), {}, {\n          backgroundColor: \"#2196F3\"\n        }),\n        onPress: function onPress() {\n          _this2.setModalVisible(!modalVisible);\n\n          _this2.addPost();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: styles.textStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }, \"Add!\"))))), React.createElement(Button, {\n        title: \"Add Post\",\n        onPress: function onPress() {\n          return _this2.setModalVisible(true);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return AddButton;\n}(React.Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addPost: function addPost(post) {\n      return dispatch({\n        type: \"ADD_POST\",\n        postInfo: post\n      });\n    }\n  };\n}\n\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  openButton: {\n    backgroundColor: \"#F194FF\",\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\",\n    borderColor: \"gray\",\n    borderWidth: 1\n  }\n});\nexport default connect(null, mapDispatchToProps)(AddButton);","map":{"version":3,"sources":["/Users/sh/Project/Simple-Posts-Project/components/addButton.js"],"names":["React","bindActionCreators","addPost","connect","AddButton","state","modalVisible","title","body","setModalVisible","visible","setState","fetch","method","JSON","stringify","userId","headers","then","res","json","console","log","props","styles","centeredView","Alert","alert","modalView","modalText","text","openButton","backgroundColor","textStyle","Component","mapDispatchToProps","dispatch","post","type","postInfo","StyleSheet","create","flex","justifyContent","alignItems","marginTop","margin","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","color","fontWeight","textAlign","marginBottom","borderColor","borderWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  Alert,\n  Modal,\n  StyleSheet,\n  Text,\n  TextInput,\n  View,\n  TouchableHighlight,\n} from \"react-native\";\nimport { bindActionCreators } from \"redux\";\nimport { addPost } from \"../redux/postsActions\";\nimport { connect } from \"react-redux\";\n\nclass AddButton extends React.Component {\n  state = {\n    modalVisible: false,\n    title: \"title\",\n    body: \"body\",\n  };\n\n  setModalVisible = (visible) => {\n    this.setState({ modalVisible: visible });\n  };\n\n  addPost = () => {\n    fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        title: this.state.title,\n        body: this.state.body,\n        userId: 1,\n      }),\n      headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        this.props.addPost(json);\n      });\n  };\n\n  render() {\n    const { modalVisible } = this.state;\n\n    return (\n      <View style={styles.centeredView}>\n        <Modal\n          animationType=\"slide\"\n          transparent={true}\n          visible={modalVisible}\n          onRequestClose={() => {\n            Alert.alert(\"Modal has been closed.\");\n          }}\n        >\n          <View style={styles.centeredView}>\n            <View style={styles.modalView}>\n              <TextInput\n                style={styles.modalText}\n                placeholder={\"Title\"}\n                onChangeText={(text) => {\n                  this.setState({ title: text });\n                }}\n              ></TextInput>\n\n              <TextInput\n                style={styles.modalText}\n                multiline\n                onChangeText={(text) => this.setState({ body: text })}\n                placeholder={\"Body\"}\n              ></TextInput>\n\n              <TouchableHighlight\n                style={{ ...styles.openButton, backgroundColor: \"#2196F3\" }}\n                onPress={() => {\n                  this.setModalVisible(!modalVisible);\n                  this.addPost();\n                }}\n              >\n                <Text style={styles.textStyle}>Add!</Text>\n              </TouchableHighlight>\n            </View>\n          </View>\n        </Modal>\n\n        <Button title=\"Add Post\" onPress={() => this.setModalVisible(true)} />\n      </View>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addPost: (post) => dispatch({ type: \"ADD_POST\", postInfo: post }),\n  };\n}\n\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22,\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  openButton: {\n    backgroundColor: \"#F194FF\",\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\",\n    borderColor: \"gray\",\n    borderWidth: 1,\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(AddButton);\n"]},"metadata":{},"sourceType":"module"}